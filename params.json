{"name":"Simple RBAC","body":"Quick Start\r\n-----------\r\n\r\n### 1. Install Simple RBAC\r\n\r\n```sh\r\npip install git+git://github.com/tonyseek/simple-rbac.git\r\n```\r\n\r\n### 2. Create a Access Control List\r\n\r\n```python\r\nimport rbac.acl\r\n\r\nacl = rbac.acl.Registry()\r\n```\r\n\r\n### 3. Register Roles and Resources\r\n\r\n```python\r\nacl.add_role(\"member\")\r\nacl.add_role(\"student\", [\"member\"])\r\nacl.add_role(\"teacher\", [\"member\"])\r\nacl.add_role(\"junior-student\", [\"student\"])\r\n\r\nacl.add_resource(\"course\")\r\nacl.add_resource(\"senior-course\", [\"course\"])\r\n```\r\n\r\n### 4. Add Rules\r\n\r\n```python\r\nacl.allow(\"member\", \"view\", \"course\")\r\nacl.allow(\"student\", \"learn\", \"course\")\r\nacl.allow(\"teacher\", \"teach\", \"course\")\r\nacl.deny(\"junior-student\", \"learn\", \"senior-course\")\r\n```\r\n\r\n### 5. Use It to Check Permission\r\n\r\n```python\r\nif acl.is_allowed(\"student\", \"view\", \"course\"):\r\n    print(\"Students chould view courses.\")\r\nelse:\r\n    print(\"Students chould not view courses.\")\r\n\r\nif acl.is_allowed(\"junior-student\", \"learn\", \"senior-course\"):\r\n    print(\"Junior students chould learn senior courses.\")\r\nelse:\r\n    print(\"Junior students chould not learn senior courses.\")\r\n```\r\n\r\n\r\nCustom Role and Resource Class\r\n------------------------------\r\n\r\nIt's not necessary to use string as role object and resource object like\r\n\"Quick Start\". You could define role class and resource class of yourself,\r\nsuch as a database mapped model in SQLAlchemy.\r\n\r\nWhatever which role class and resource class you will use, it must implement\r\n`__hash__` method and `__eq__` method to be [hashable][0].\r\n\r\n### Example\r\n\r\n```python\r\nclass Role(db.Model):\r\n    \"\"\"The role.\"\"\"\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    screen_name = db.Column(db.Unicode, nullable=False, unique=True)\r\n\r\n    def __hash__(self):\r\n        return hash(\"ROLE::%d\" % self.id)\r\n\r\n    def __eq__(self, other):\r\n        return self.id == other.id\r\n\r\n\r\nclass Resource(db.Model):\r\n    \"\"\"The resource.\"\"\"\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    screen_name = db.Column(db.Unicode, nullable=False, unique=True)\r\n\r\n    def __hash__(self):\r\n        return hash(\"RESOURCE::%d\" % self.id)\r\n\r\n    def __eq__(self, other):\r\n        return self.id == other.id\r\n```\r\n\r\nOf course, You could use the built-in hashable types too, such as tuple,\r\nnamedtuple, frozenset and more.\r\n\r\n\r\nUse the Identity Context Check Your Permission\r\n----------------------------------------------\r\n\r\nObviously, the work of checking permission is a cross-cutting concern.\r\nThe module named `rbac.context`, our `IdentityContext`, provide some ways to\r\nmake our work neater.\r\n\r\n### 1. Create the Context Manager\r\n\r\n```python\r\nacl = Registry()\r\ncontext = IdentityContext(acl)\r\n```\r\n\r\n### 2. Set a Loader\r\n\r\nThe loader should load the roles of current user.\r\n\r\n```python\r\nfrom myapp import get_current_user\r\n\r\n@context.set_roles_loader\r\ndef second_load_roles():\r\n    user = get_current_user()\r\n    yield \"everyone\"\r\n    for role in user.roles:\r\n        yield str(role)\r\n```\r\n\r\n### 3. Protect Your Action\r\n\r\nNow you could protect your action from unauthorized access. As you please, you\r\ncould choose many ways to check the permission, including python `decorator`,\r\npython `with statement` or simple method calling.\r\n\r\n#### Decorator\r\n\r\n```python\r\n@context.check_permission(\"view\", \"article\", message=\"can't view\")\r\ndef article_page():\r\n    return \"your-article\"\r\n```\r\n\r\n#### With Statement\r\n\r\n```python\r\ndef article_page():\r\n    with context.check_permission(\"view\", \"article\", message=\"can't view\"):\r\n        return \"your-article\"\r\n```\r\n\r\n#### Simple Method Calling\r\n\r\n```python\r\ndef article_page():\r\n    context.check_permission(\"view\", \"article\", message=\"can't view\").check()\r\n    return \"your-article\"\r\n```\r\n\r\n#### Exception Handler and Non-Zero Checking\r\n\r\nWhatever which way you choosen, a exception `rbac.context.PermissionDenied`\r\nwill be raised while a unauthorized access happening. The keyword arguments\r\nsent to the `context.check_permission` will be set into a attirbute named\r\n`kwargs` of the exception. You could get those data in your exception handler.\r\n\r\n```python\r\n@context.check_permission(\"view\", \"article\", message=\"can not view\")\r\ndef article_page():\r\n    return \"your-article\"\r\n\r\ntry:\r\n    print article_page()\r\nexcept PermissionDenied as exception:\r\n    print \"The access has been denied, you %s\" % exception.kwargs['message']\r\n```\r\n\r\nIf you don't want to raise the exception but only check the access is allowed\r\nor not, you could use the checking like a boolean value.\r\n\r\n```python\r\nif not context.check_permission(\"view\", \"article\"):\r\n    print \"Oh! the access has been denied.\"\r\n\r\nis_allowed = bool(context.check_permission(\"view\", \"article\"))\r\n```\r\n\r\n\r\n[0]: http://docs.python.org/glossary.html#term-hashable \"Hashable\"\r\n","tagline":"A simple role based access control utility for Python.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}